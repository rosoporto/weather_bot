import os
import telebot
from telebot import TeleBot, types
import schedule
import time
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv


load_dotenv(override=True)
tg_api_token=os.getenv("TG_API_TOKEN")
weather_api_key=os.getenv("WEATHER_API_KEY")

bot = TeleBot(tg_api_token)


class WeatherBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.users = {}
        self.weather_api_key = "YOUR_WEATHER_API_KEY"
        self.setup_handlers()

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            self.ask_city(message.chat.id)
            
        @self.bot.message_handler(commands=['reset'])
        def handle_reset(message):
            self.reset_user_data(message.chat.id)

        @self.bot.message_handler(content_types=['location'])
        def handle_location(message):
            chat_id = message.chat.id
            if chat_id not in self.users or self.users[chat_id].get('state') != 'waiting_for_location':
                self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–º–æ—â—å—é /start")
                return
            lat = message.location.latitude
            lon = message.location.longitude
            self.users[chat_id]['location'] = f"{lat},{lon}"
            self.users[chat_id]['state'] = 'waiting_for_time'
            self.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (24 —á —Ñ–æ—Ä–º–∞—Ç) –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú).\n\n–ü—Ä–∏–º–µ—Ä: 07:45 (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –ø—Ä–∏–¥–µ—Ç –≤–∞–º —É—Ç—Ä–æ–º –≤ 7:45")

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            chat_id = message.chat.id
            if message.text == '/change':
                self.bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ: location –∏–ª–∏ time")
                self.users[chat_id]["state"] = "waiting_for_change"
            elif chat_id not in self.users:
                self.users[chat_id] = {"state": "waiting_for_location"}
                self.ask_location(chat_id)
            else:
                state = self.users[chat_id]["state"]
                if state == "waiting_for_location":
                    self.set_location(chat_id, message.text)
                elif state == "waiting_for_time":
                    self.set_time(chat_id, message.text)
                elif state == "waiting_for_change":
                    if message.text.lower() == "location":
                        self.ask_location(chat_id)
                    elif message.text.lower() == "time":
                        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
                        self.users[chat_id]["state"] = "waiting_for_time"
                    else:
                        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'location' –∏–ª–∏ 'time'")
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_query(call):
            chat_id = call.message.chat.id
            
            if call.data == "–î—Ä—É–≥–æ–π":
                self.ask_location(chat_id)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ ask_location()
            
            elif call.data in ["08:00", "12:00", "18:00"]:
                self.set_time(chat_id, call.data)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            else:
                location_name = call.data  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
                self.set_location(chat_id, location_name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    
    
    def ask_city(self, chat_id):
        markup = types.InlineKeyboardMarkup()
        cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]
        
        for city in cities:
            button = types.InlineKeyboardButton(text=city, callback_data=city)
            markup.add(button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–π"
        other_button = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="–î—Ä—É–≥–æ–π")
        markup.add(other_button)    
        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
    
    def ask_location(self, chat_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        markup.add(button)
        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=markup)
        self.users[chat_id] = {"state": "waiting_for_location"}

    def set_location(self, chat_id, location_name):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={location_name}&appid={self.weather_api_key}&units=metric"
        response = requests.get(url)
        data = response.json()
        if data.get("cod") != 200:
            self.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        self.users[chat_id]["location"] = location_name
        self.users[chat_id]["state"] = "waiting_for_time"
        self.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")

    def set_time(self, chat_id, time_str):
        try:
            datetime.strptime(time_str, "%H:%M")
            
            if chat_id not in self.users:
                return
            
            self.users[chat_id]["time"] = time_str
            self.users[chat_id]["state"] = "configured"
            self.bot.send_message(chat_id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ {time_str} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")
            self.schedule_weather(chat_id)
        except ValueError:
            self.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

    def get_weather(self, location):
        if ',' in location:
            lat, lon = location.split(',', 1)
            try:
                lat = float(lat)
                lon = float(lon)
            except ValueError:
                return "‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö."
            url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={self.weather_api_key}&units=metric"
        else:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={self.weather_api_key}&units=metric"
        
        response = requests.get(url)
        data = response.json()
        if data.get("cod") == 200:
            temp =        data["main"]["temp"]
            feels_like =  data["main"]["feels_like"]
            humidity =    data["main"]["humidity"]
            wind_speed =  data["wind"]["speed"]
            description = data["weather"][0]["description"]
            icon_code =   data["weather"][0]["icon"]
            
            weather_emoji = self.get_weather_emoji(icon_code)
            
            return (f"üåç –ü–æ–≥–æ–¥–∞ –≤ {location}\n\n"
                    f"{weather_emoji} {description.capitalize()}\n\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                    f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å")
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ."

    def get_weather_emoji(self, icon_code):
        emoji_dict = {
            "01d": "‚òÄÔ∏è", "01n": "üåô", "02d": "üå§", "02n": "‚òÅÔ∏è",
            "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è", "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
            "09d": "üåß", "09n": "üåß", "10d": "üå¶", "10n": "üåß",
            "11d": "‚õà", "11n": "‚õà", "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",
            "50d": "üå´", "50n": "üå´"
        }
        return emoji_dict.get(icon_code, "üåà")

    def send_weather(self, chat_id):
        try:
            location = self.users.get(chat_id, {}).get("location")
            if not location:
                self.bot.send_message(chat_id, "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                return
            weather_info = self.get_weather(location)
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
            message = f"‚è∞ –í—Ä–µ–º—è: {current_time}\n\n{weather_info}"
            self.bot.send_message(chat_id, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def reset_user_data(self, chat_id):
        if chat_id in self.users:
            del self.users[chat_id]
        self.bot.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        self.ask_location(chat_id)

    def schedule_weather(self, chat_id):
        if chat_id in self.users and "job" in self.users[chat_id]:
            schedule.cancel_job(self.users[chat_id]["job"])
        job = schedule.every().day.at(self.users[chat_id]["time"]).do(self.send_weather, chat_id)
        self.users[chat_id]["job"] = job

    def run_schedule(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

    def run(self):
        schedule_thread = threading.Thread(target=self.run_schedule)
        schedule_thread.start()
        self.bot.polling(none_stop=True)


if __name__ == "__main__":
    bot = WeatherBot("YOUR_BOT_TOKEN")
    bot.run()



